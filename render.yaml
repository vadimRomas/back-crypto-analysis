services:
  - type: worker
    name: queue
    region: frankfurt
    env: python
    buildCommand: "pip install -r requirements.txt"
    startCommand: "celery --app backend_django worker --loglevel info --concurrency 4"
    autoDeploy: false
#    envVars:
#      - key: CELERY_BROKER_URL
#        fromService:
#          name: celery-redis
#          type: redis
#          property: connectionString
  - type: web
    name: app
    region: frankfurt
    plan: free
    env: python
    buildCommand: "pip install -r requirements.txt"
    startCommand: "python3 manage.py migrate &&gunicorn backend_django.wsgi"
    autoDeploy: false
#    envVars:
#      - key: CELERY_BROKER_URL
#        fromService:
#          name: celery-redis
#          type: redis
#          property: connectionString
  - type: web
    name: flower
    region: frankfurt
    plan: free
    env: python
    buildCommand: "pip install -r requirements.txt"
    startCommand: "celery flower --app backend_django --loglevel info"
    autoDeploy: false
#    envVars:
#      - key: CELERY_BROKER_URL
#        fromService:
#          type: redis
#          name: celery-redis
#          property: connectionString
#  - type: redis
#    name: celery-redis
#    region: frankfurt
#    plan: free # we choose a plan with persistence to ensure tasks are not lost upon restart
#    maxmemoryPolicy: noeviction # recommended policy for queues
#    ipAllowList: [] # only allow internal connections
